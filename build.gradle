plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'org.jreleaser' version '1.8.0'
}

group 'com.github.gotson'
description 'Spring Session for Caffeine'

sourceCompatibility = '17'
targetCompatibility = '17'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:3.1.3"))

    implementation("org.springframework:spring-context")
    implementation("org.springframework:spring-context-support")
    implementation("org.springframework.session:spring-session-core")
    implementation("jakarta.annotation:jakarta.annotation-api")

    implementation("com.github.ben-manes.caffeine:caffeine")

    testImplementation("org.springframework:spring-test")
    testImplementation("org.springframework:spring-web")
    testImplementation("org.springframework.security:spring-security-core")
    testImplementation("jakarta.servlet:jakarta.servlet-api")

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.assertj:assertj-core")
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Spring Session Caffeine'
                description = "${description}"
                url = 'https://github.com/gotson/spring-session-caffeine'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://github.com/gotson/spring-session-caffeine/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'gotson'
                        name = 'Gauthier Roebroeck'
                    }
                }
                scm {
                    url = 'https://github.com/gotson/spring-session-caffeine.git'
                }
            }
        }
    }
}

signing {
    required { false }
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

jreleaser {
    project {
        description = "${description}"
        copyright = 'Gauthier Roebroeck'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                contributors {
                    enabled = false
                }
                hide {
                    uncategorized = true
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}